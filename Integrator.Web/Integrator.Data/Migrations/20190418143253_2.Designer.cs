// <auto-generated />
using System;
using Integrator.Data;
using Integrator.Models.Domain.Addresses;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Integrator.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20190418143253_2")]
    partial class _2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.3-servicing-35854")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Integrator.Models.Domain.Addresses.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("AddressID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AddressType");

                    b.Property<string>("AreaCode");

                    b.Property<string>("City");

                    b.Property<string>("Country");

                    b.Property<int>("CountryID");

                    b.Property<int>("IntegratorUserID")
                        .HasColumnName("IntegratorUserID");

                    b.Property<string>("Suburb");

                    b.HasKey("Id");

                    b.HasIndex("IntegratorUserID");

                    b.ToTable("Addresses");

                    b.HasDiscriminator<int>("AddressType");
                });

            modelBuilder.Entity("Integrator.Models.Domain.Authentication.IntegratorRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IntegratorRoleID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("IntegratorRoles");
                });

            modelBuilder.Entity("Integrator.Models.Domain.Authentication.IntegratorRoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IntegratorRoleClaimID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<int>("RoleId")
                        .HasColumnName("BIntegratorRoleID");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("IntegratorRoleClaims");
                });

            modelBuilder.Entity("Integrator.Models.Domain.Authentication.IntegratorUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IntegratorUserID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<DateTime>("DateOfBirth");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("IntegratorUsers");
                });

            modelBuilder.Entity("Integrator.Models.Domain.Authentication.IntegratorUserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IntegratorUserClaimID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<int>("UserId")
                        .HasColumnName("IntegratorUserID");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("IntegratorUserClaims");
                });

            modelBuilder.Entity("Integrator.Models.Domain.Authentication.IntegratorUserLogin", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<int>("UserId")
                        .HasColumnName("IntegratorUserID");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("IntegratorUserLogins");
                });

            modelBuilder.Entity("Integrator.Models.Domain.Authentication.IntegratorUserRole", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnName("IntegratorUserID");

                    b.Property<int>("RoleId")
                        .HasColumnName("IntegratorRoleID");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("IntegratorUserRoles");
                });

            modelBuilder.Entity("Integrator.Models.Domain.Authentication.IntegratorUserToken", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnName("IntegratorUserID");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("IntegratorUserTokens");
                });

            modelBuilder.Entity("Integrator.Models.Domain.Common.ContactDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ContactDetailID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ContactDetailTypeID");

                    b.Property<string>("ContactItem")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("ContactDetailTypeID");

                    b.ToTable("ContactDetails");
                });

            modelBuilder.Entity("Integrator.Models.Domain.Common.ContactDetailType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ContactDetailTypeID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("aContactDetailType")
                        .IsRequired()
                        .HasColumnName("ContactDetailType")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("ContactDetailTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            aContactDetailType = "Cell Number"
                        },
                        new
                        {
                            Id = 2,
                            aContactDetailType = "Office Number"
                        },
                        new
                        {
                            Id = 3,
                            aContactDetailType = "Email Address"
                        },
                        new
                        {
                            Id = 4,
                            aContactDetailType = "WebSite"
                        });
                });

            modelBuilder.Entity("Integrator.Models.Domain.Common.IntegratorUserContactDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IntegratorUserContactDetailID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ContactDetailID");

                    b.Property<DateTime>("DateLastUpdated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("IntegratorUserID");

                    b.HasKey("Id");

                    b.HasIndex("ContactDetailID");

                    b.HasIndex("IntegratorUserID");

                    b.ToTable("IntegratorUserContactDetails");
                });

            modelBuilder.Entity("Integrator.Models.Domain.Common.Interest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("InterestID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AnInterest")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("Interests");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AnInterest = "Climbing"
                        },
                        new
                        {
                            Id = 2,
                            AnInterest = "Snowboarding"
                        },
                        new
                        {
                            Id = 3,
                            AnInterest = "Cooking"
                        });
                });

            modelBuilder.Entity("Integrator.Models.Domain.Companies.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CompanyID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CompanyName")
                        .HasMaxLength(150);

                    b.HasKey("Id");

                    b.ToTable("Companies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CompanyName = "Self Employed"
                        });
                });

            modelBuilder.Entity("Integrator.Models.Domain.Companies.CompanyJobListing", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CompanyJobListingID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CompanyJobID");

                    b.Property<DateTime>("DateEnded")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime>("DateStarted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("LevelOfUrgentcy");

                    b.HasKey("Id");

                    b.HasIndex("CompanyJobID");

                    b.ToTable("CompanyJobListings");
                });

            modelBuilder.Entity("Integrator.Models.Domain.Companies.CompanyRelatedIndustry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CompanyRelatedIndustryID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CompanyID");

                    b.Property<int>("CoreKbIndustryID");

                    b.HasKey("Id");

                    b.HasIndex("CompanyID");

                    b.HasIndex("CoreKbIndustryID");

                    b.ToTable("CompanyRelatedIndustries");
                });

            modelBuilder.Entity("Integrator.Models.Domain.CurriculumVitaes.CurriculumVitaeWorkExperienceReferences", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CurriculumVitaeWorkExperienceReferenceID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ContactFirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("ContactLastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int>("CurriculumViteaWorkExperienceID");

                    b.Property<bool>("HasBeenVerified");

                    b.HasKey("Id");

                    b.ToTable("CurriculumVitaeWorkExperienceReferences");
                });

            modelBuilder.Entity("Integrator.Models.Domain.CurriculumVitaes.CurriculumVitea", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CurriculumViteaID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CareerSummary")
                        .IsRequired()
                        .IsUnicode(false);

                    b.Property<DateTime>("DateLastUpdated")
                        .HasColumnType("datetime");

                    b.Property<int>("IntegratorUserID");

                    b.HasKey("Id");

                    b.HasIndex("IntegratorUserID");

                    b.ToTable("CurriculumViteas");
                });

            modelBuilder.Entity("Integrator.Models.Domain.CurriculumVitaes.EductaionalInstitutions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("EductaionalInstitutionID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("EductaionalInstitution")
                        .HasMaxLength(150)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("EductaionalInstitutions");
                });

            modelBuilder.Entity("Integrator.Models.Domain.CurriculumVitaes.IntegratorUserAwards", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IntegratorUserAwardID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AwardDescription")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .IsUnicode(false);

                    b.Property<string>("AwardTitle")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int>("IntegratorUserID")
                        .HasColumnName("IntegratorUserID");

                    b.HasKey("Id");

                    b.HasIndex("IntegratorUserID");

                    b.ToTable("IntegratorUserAwards");
                });

            modelBuilder.Entity("Integrator.Models.Domain.CurriculumVitaes.IntegratorUserInterest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IntegratorUserInterestID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("IntegratorUserID");

                    b.Property<int>("InterestID");

                    b.Property<double>("InterestLevel");

                    b.HasKey("Id");

                    b.HasIndex("IntegratorUserID");

                    b.HasIndex("InterestID");

                    b.ToTable("IntegratorUserInterests");
                });

            modelBuilder.Entity("Integrator.Models.Domain.CurriculumVitaes.IntegratorUserLanguages", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IntegratorUserLanguageID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("CanSpeakAndWrite");

                    b.Property<int>("IntegratorUserID");

                    b.Property<bool>("IsPrimaryLanguage");

                    b.Property<int>("LanguageID");

                    b.Property<double>("LanguageProficiencyLevel");

                    b.HasKey("Id");

                    b.HasIndex("IntegratorUserID");

                    b.HasIndex("LanguageID");

                    b.ToTable("IntegratorUserLanguages");
                });

            modelBuilder.Entity("Integrator.Models.Domain.CurriculumVitaes.Language", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("LanguageID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("LanguageSpoken")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("Languages");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            LanguageSpoken = "English"
                        },
                        new
                        {
                            Id = 2,
                            LanguageSpoken = "Afrikaans"
                        },
                        new
                        {
                            Id = 3,
                            LanguageSpoken = "Xhosa"
                        },
                        new
                        {
                            Id = 4,
                            LanguageSpoken = "Zulu"
                        });
                });

            modelBuilder.Entity("Integrator.Models.Domain.CurriculumVitaes.QualificationLevels", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("QualificationLevelID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("QualificationLevel")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("QualificationLevels");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            QualificationLevel = "Masters Degree"
                        },
                        new
                        {
                            Id = 2,
                            QualificationLevel = "Honours Degree"
                        },
                        new
                        {
                            Id = 3,
                            QualificationLevel = "Degree"
                        },
                        new
                        {
                            Id = 4,
                            QualificationLevel = "Doctorial Degree"
                        },
                        new
                        {
                            Id = 5,
                            QualificationLevel = "Certificate"
                        },
                        new
                        {
                            Id = 6,
                            QualificationLevel = "Shool Level Equivalent"
                        });
                });

            modelBuilder.Entity("Integrator.Models.Domain.CurriculumVitaes.UserQualification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("UserQualificationID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EductaionalInstitutionID");

                    b.Property<int>("IntegratorUserID");

                    b.Property<double>("QualificationAverage");

                    b.Property<int>("QualificationLevelID");

                    b.Property<string>("QualificationTitle")
                        .IsRequired()
                        .HasMaxLength(175)
                        .IsUnicode(false);

                    b.Property<DateTime>("YearCompletedQualification")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime>("YearStartedQualification")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("Id");

                    b.HasIndex("EductaionalInstitutionID");

                    b.HasIndex("IntegratorUserID");

                    b.HasIndex("QualificationLevelID");

                    b.ToTable("UserQualifications");
                });

            modelBuilder.Entity("Integrator.Models.Domain.CurriculumVitaes.WorkExperienceReferenceContactDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("WorkExperienceReferenceContactDetailID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ContactDetailID");

                    b.Property<int>("CurriculumVitaeWorkExperienceReferenceID");

                    b.HasKey("Id");

                    b.HasIndex("ContactDetailID");

                    b.HasIndex("CurriculumVitaeWorkExperienceReferenceID");

                    b.ToTable("WorkExperienceReferenceContactDetails");
                });

            modelBuilder.Entity("Integrator.Models.Domain.Files.InegratorFileBlob", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("FileID");

                    b.Property<byte[]>("FileBlob")
                        .IsRequired()
                        .HasColumnType("image");

                    b.HasKey("Id");

                    b.ToTable("InegratorFileBlobs");
                });

            modelBuilder.Entity("Integrator.Models.Domain.Files.IntegratorFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("FileID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime");

                    b.Property<string>("FileExtension")
                        .IsRequired()
                        .HasMaxLength(25)
                        .IsUnicode(false);

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<long>("FileSize");

                    b.HasKey("Id");

                    b.ToTable("IntegratorFiles");
                });

            modelBuilder.Entity("Integrator.Models.Domain.Files.UserFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("UserFileID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FileID");

                    b.Property<int>("IntegratorUserID");

                    b.HasKey("Id");

                    b.HasIndex("FileID");

                    b.HasIndex("IntegratorUserID");

                    b.ToTable("UserFiles");
                });

            modelBuilder.Entity("Integrator.Models.Domain.Files.UserPicture", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("FileID");

                    b.Property<int>("IntegratorUserID");

                    b.Property<bool>("IsCurrentProfilePicture");

                    b.HasKey("Id");

                    b.HasIndex("IntegratorUserID");

                    b.ToTable("UserPictures");
                });

            modelBuilder.Entity("Integrator.Models.Domain.KnowledgeBase.Companies.CompanyJob", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CompanyJobID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CompanyID");

                    b.Property<int>("CoreKbJobID");

                    b.Property<string>("JobDescription")
                        .IsRequired()
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("CompanyID");

                    b.HasIndex("CoreKbJobID");

                    b.ToTable("CompanyJobs");
                });

            modelBuilder.Entity("Integrator.Models.Domain.KnowledgeBase.Companies.CompanyJobRelatedIndustry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CompanyJobRelatedIndustryID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CompanyJobID");

                    b.Property<int>("CoreKbIndustryID");

                    b.Property<bool>("LevelOfCompanyInvolvement");

                    b.HasKey("Id");

                    b.HasIndex("CompanyJobID");

                    b.HasIndex("CoreKbIndustryID");

                    b.ToTable("CompanyJobRelatedIndustries");
                });

            modelBuilder.Entity("Integrator.Models.Domain.KnowledgeBase.Companies.CompanyJobSkill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CompanyJobSkillID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CompanyJobID");

                    b.Property<int>("CoreKbSkillID");

                    b.Property<int>("LevelOfImportantce");

                    b.HasKey("Id");

                    b.HasIndex("CompanyJobID");

                    b.HasIndex("CoreKbSkillID");

                    b.ToTable("CompanyJobSkills");
                });

            modelBuilder.Entity("Integrator.Models.Domain.KnowledgeBase.Core.CoreKbIndustry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CoreKbIndustryID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CoreKbIndustryCategoryID");

                    b.Property<string>("CoreKbIndustryName")
                        .IsRequired()
                        .HasColumnName("CoreKBIndustryName")
                        .HasMaxLength(150)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("CoreKbIndustryCategoryID");

                    b.ToTable("CoreKbIndustries");
                });

            modelBuilder.Entity("Integrator.Models.Domain.KnowledgeBase.Core.CoreKbIndustryCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CoreKbIndustryCategoryID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CoreKbIndustryCategoryName")
                        .HasColumnName("CoreKBIndustryCategory")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("CoreKbIndustryCategories");
                });

            modelBuilder.Entity("Integrator.Models.Domain.KnowledgeBase.Core.CoreKbIndustryJob", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CoreKbIndustryJobID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CoreKbIndustryID");

                    b.Property<int>("CoreKbJobID");

                    b.HasKey("Id");

                    b.HasIndex("CoreKbIndustryID");

                    b.HasIndex("CoreKbJobID");

                    b.ToTable("CoreKbIndustryJobs");
                });

            modelBuilder.Entity("Integrator.Models.Domain.KnowledgeBase.Core.CoreKbJob", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CoreKbJobID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CoreKbJobTitle")
                        .IsRequired()
                        .HasColumnName("CoreKBJob")
                        .HasMaxLength(150)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("CoreKbJobs");
                });

            modelBuilder.Entity("Integrator.Models.Domain.KnowledgeBase.Core.CoreKbJobSkill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CoreKbJobSkillID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CoreKbJobID");

                    b.Property<int>("CoreKbSkillID");

                    b.HasKey("Id");

                    b.HasIndex("CoreKbJobID");

                    b.HasIndex("CoreKbSkillID");

                    b.ToTable("CoreKbJobSkills");
                });

            modelBuilder.Entity("Integrator.Models.Domain.KnowledgeBase.Core.CoreKbSkill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CoreKbSkillID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CoreSkill")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(false);

                    b.Property<int>("CoreSkillCategoryID");

                    b.HasKey("Id");

                    b.HasIndex("CoreSkillCategoryID");

                    b.ToTable("CoreKbSkills");
                });

            modelBuilder.Entity("Integrator.Models.Domain.KnowledgeBase.Core.CoreKbSkillType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CoreKbSkillTypeID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CoreKbSkillTypeName")
                        .IsRequired()
                        .HasColumnName("CoreKBSkillType")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("CoreKbSkillTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CoreKbSkillTypeName = "Hard"
                        },
                        new
                        {
                            Id = 2,
                            CoreKbSkillTypeName = "Soft"
                        });
                });

            modelBuilder.Entity("Integrator.Models.Domain.KnowledgeBase.Core.CoreSkillCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CoreSkillCategoryID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CoreKbSkillTypeID");

                    b.Property<string>("CoreSkillCategoryName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("CoreKbSkillTypeID");

                    b.ToTable("CoreSkillCategories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CoreKbSkillTypeID = 2,
                            CoreSkillCategoryName = "Communication"
                        },
                        new
                        {
                            Id = 2,
                            CoreKbSkillTypeID = 2,
                            CoreSkillCategoryName = "Leadership"
                        },
                        new
                        {
                            Id = 3,
                            CoreKbSkillTypeID = 2,
                            CoreSkillCategoryName = "Influencing"
                        },
                        new
                        {
                            Id = 4,
                            CoreKbSkillTypeID = 2,
                            CoreSkillCategoryName = "Creativity"
                        },
                        new
                        {
                            Id = 5,
                            CoreKbSkillTypeID = 2,
                            CoreSkillCategoryName = "Professional"
                        },
                        new
                        {
                            Id = 6,
                            CoreKbSkillTypeID = 2,
                            CoreSkillCategoryName = "Interpersonal"
                        },
                        new
                        {
                            Id = 7,
                            CoreKbSkillTypeID = 2,
                            CoreSkillCategoryName = "Personal"
                        });
                });

            modelBuilder.Entity("Integrator.Models.Domain.KnowledgeBase.IndividualUsers.UserJob", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("UserJobID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Achievments")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("('')")
                        .IsUnicode(false);

                    b.Property<int>("CompanyID");

                    b.Property<int>("CoreKbJobID");

                    b.Property<int>("CurriculumViteaID");

                    b.Property<DateTime>("DateEnded")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime>("DateStarted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("IntegratorUserID");

                    b.Property<bool>("IsCurrentJob");

                    b.Property<string>("WorkExperienceDescription")
                        .IsRequired()
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("CompanyID");

                    b.HasIndex("CoreKbJobID");

                    b.HasIndex("CurriculumViteaID");

                    b.HasIndex("IntegratorUserID");

                    b.ToTable("UserJobs");
                });

            modelBuilder.Entity("Integrator.Models.Domain.KnowledgeBase.IndividualUsers.UserJobRelatedIndustry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("UserJobRelatedIndustryID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CoreKbIndustryID");

                    b.Property<int>("LevelOfIndustInvolvement");

                    b.Property<int>("UserJobID");

                    b.HasKey("Id");

                    b.HasIndex("CoreKbIndustryID");

                    b.HasIndex("UserJobID");

                    b.ToTable("UserJobRelatedIndustries");
                });

            modelBuilder.Entity("Integrator.Models.Domain.KnowledgeBase.IndividualUsers.UserJobSkill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("UserJobSkillID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CoreKbSkillID");

                    b.Property<int>("UserJobID");

                    b.Property<int>("UserJobSkillLevel");

                    b.HasKey("Id");

                    b.HasIndex("CoreKbSkillID");

                    b.HasIndex("UserJobID");

                    b.ToTable("UserJobSkills");
                });

            modelBuilder.Entity("Integrator.Models.Domain.Addresses.ComplexAddress", b =>
                {
                    b.HasBaseType("Integrator.Models.Domain.Addresses.Address");

                    b.Property<string>("ComplexName");

                    b.Property<string>("ComplexUnitNumber");

                    b.HasDiscriminator().HasValue(2);
                });

            modelBuilder.Entity("Integrator.Models.Domain.Addresses.POBoxAddress", b =>
                {
                    b.HasBaseType("Integrator.Models.Domain.Addresses.Address");

                    b.Property<string>("POBoxNumber");

                    b.HasDiscriminator().HasValue(0);
                });

            modelBuilder.Entity("Integrator.Models.Domain.Addresses.StreetAddress", b =>
                {
                    b.HasBaseType("Integrator.Models.Domain.Addresses.Address");

                    b.Property<string>("StreetName");

                    b.Property<string>("StreetNumber");

                    b.HasDiscriminator().HasValue(1);
                });

            modelBuilder.Entity("Integrator.Models.Domain.Addresses.Address", b =>
                {
                    b.HasOne("Integrator.Models.Domain.Authentication.IntegratorUser", "IntegratorUser")
                        .WithMany()
                        .HasForeignKey("IntegratorUserID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Integrator.Models.Domain.Authentication.IntegratorRoleClaim", b =>
                {
                    b.HasOne("Integrator.Models.Domain.Authentication.IntegratorRole", "Role")
                        .WithMany("RoleClaims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Integrator.Models.Domain.Authentication.IntegratorUserClaim", b =>
                {
                    b.HasOne("Integrator.Models.Domain.Authentication.IntegratorUser", "IntegratorUser")
                        .WithMany("Claims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Integrator.Models.Domain.Authentication.IntegratorUserLogin", b =>
                {
                    b.HasOne("Integrator.Models.Domain.Authentication.IntegratorUser", "IntegratorUser")
                        .WithMany("Logins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Integrator.Models.Domain.Authentication.IntegratorUserRole", b =>
                {
                    b.HasOne("Integrator.Models.Domain.Authentication.IntegratorRole", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Integrator.Models.Domain.Authentication.IntegratorUser", "IntegratorUser")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Integrator.Models.Domain.Authentication.IntegratorUserToken", b =>
                {
                    b.HasOne("Integrator.Models.Domain.Authentication.IntegratorUser", "IntegratorUser")
                        .WithMany("Tokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Integrator.Models.Domain.Common.ContactDetail", b =>
                {
                    b.HasOne("Integrator.Models.Domain.Common.ContactDetailType", "ContactDetailType")
                        .WithMany("ContactDetails")
                        .HasForeignKey("ContactDetailTypeID")
                        .HasConstraintName("FK_ContactDetails_ContactDetailTypes")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Integrator.Models.Domain.Common.IntegratorUserContactDetail", b =>
                {
                    b.HasOne("Integrator.Models.Domain.Common.ContactDetail", "ContactDetail")
                        .WithMany("IntegratorUserContactDetails")
                        .HasForeignKey("ContactDetailID")
                        .HasConstraintName("FK_IntegratorUserContactDetails_ContactDetails")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Integrator.Models.Domain.Authentication.IntegratorUser", "IntegratorUser")
                        .WithMany("IntegratorUserContactDetails")
                        .HasForeignKey("IntegratorUserID")
                        .HasConstraintName("FK_IntegratorUserContactDetails_IntegratorUsers")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Integrator.Models.Domain.Companies.CompanyJobListing", b =>
                {
                    b.HasOne("Integrator.Models.Domain.KnowledgeBase.Companies.CompanyJob", "CompanyJob")
                        .WithMany("CompanyJobListings")
                        .HasForeignKey("CompanyJobID")
                        .HasConstraintName("FK_CompanyJobListings_CompanyJobs")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Integrator.Models.Domain.Companies.CompanyRelatedIndustry", b =>
                {
                    b.HasOne("Integrator.Models.Domain.Companies.Company", "Company")
                        .WithMany("CompanyRelatedIndustries")
                        .HasForeignKey("CompanyID")
                        .HasConstraintName("FK_CompanyRelatedIndustries_Company")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Integrator.Models.Domain.KnowledgeBase.Core.CoreKbIndustry", "CoreKbIndustry")
                        .WithMany("CompanyRelatedIndustries")
                        .HasForeignKey("CoreKbIndustryID")
                        .HasConstraintName("FK_CompanyRelatedIndustries_CoreKbIndustries")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Integrator.Models.Domain.CurriculumVitaes.CurriculumVitea", b =>
                {
                    b.HasOne("Integrator.Models.Domain.Authentication.IntegratorUser", "IntegratorUser")
                        .WithMany("CurriculumViteas")
                        .HasForeignKey("IntegratorUserID")
                        .HasConstraintName("FK_CurriculumViteas_IntegratorUsers")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Integrator.Models.Domain.CurriculumVitaes.IntegratorUserAwards", b =>
                {
                    b.HasOne("Integrator.Models.Domain.Authentication.IntegratorUser", "IntegratorUser")
                        .WithMany("IntegratorUserAwards")
                        .HasForeignKey("IntegratorUserID")
                        .HasConstraintName("FK_IntegratorUserAwards_IntegratorUsers")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Integrator.Models.Domain.CurriculumVitaes.IntegratorUserInterest", b =>
                {
                    b.HasOne("Integrator.Models.Domain.Authentication.IntegratorUser", "IntegratorUser")
                        .WithMany("IntegratorUserInterests")
                        .HasForeignKey("IntegratorUserID")
                        .HasConstraintName("FK_IntegratorUserInterests_IntegratorUsers")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Integrator.Models.Domain.Common.Interest", "UserInterest")
                        .WithMany("IntegratorUserInterests")
                        .HasForeignKey("InterestID")
                        .HasConstraintName("FK_IntegratorUserInterests_Interests")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Integrator.Models.Domain.CurriculumVitaes.IntegratorUserLanguages", b =>
                {
                    b.HasOne("Integrator.Models.Domain.Authentication.IntegratorUser", "IntegratorUser")
                        .WithMany("IntegratorUserLanguages")
                        .HasForeignKey("IntegratorUserID")
                        .HasConstraintName("FK_IntegratorUserLanguages_IntegratorUsers")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Integrator.Models.Domain.CurriculumVitaes.Language", "SpokenLanguage")
                        .WithMany("UserLanguages")
                        .HasForeignKey("LanguageID")
                        .HasConstraintName("FK_IntegratorUserLanguages_Languages")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Integrator.Models.Domain.CurriculumVitaes.UserQualification", b =>
                {
                    b.HasOne("Integrator.Models.Domain.CurriculumVitaes.EductaionalInstitutions", "EductaionalInstitution")
                        .WithMany("UserQualifications")
                        .HasForeignKey("EductaionalInstitutionID")
                        .HasConstraintName("FK_UserQualifications_EductaionalInstitutions")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Integrator.Models.Domain.Authentication.IntegratorUser", "IntegratorUser")
                        .WithMany("UserQualifications")
                        .HasForeignKey("IntegratorUserID")
                        .HasConstraintName("FK_UserQualifications_IntegratorUsers")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Integrator.Models.Domain.CurriculumVitaes.QualificationLevels", "QualificationLevel")
                        .WithMany("UserQualifications")
                        .HasForeignKey("QualificationLevelID")
                        .HasConstraintName("FK_UserQualifications_QualificationLevels")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Integrator.Models.Domain.CurriculumVitaes.WorkExperienceReferenceContactDetail", b =>
                {
                    b.HasOne("Integrator.Models.Domain.Common.ContactDetail", "ContactDetail")
                        .WithMany("WorkExperienceReferenceContactDetails")
                        .HasForeignKey("ContactDetailID")
                        .HasConstraintName("FK_WorkExperienceReferenceContactDetails_ContactDetails")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Integrator.Models.Domain.CurriculumVitaes.CurriculumVitaeWorkExperienceReferences", "CurriculumVitaeWorkExperienceReference")
                        .WithMany("WorkExperienceReferenceContactDetails")
                        .HasForeignKey("CurriculumVitaeWorkExperienceReferenceID")
                        .HasConstraintName("FK_WorkExperienceReferenceContactDetails_CurriculumVitaeWorkExperienceReferences")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Integrator.Models.Domain.Files.InegratorFileBlob", b =>
                {
                    b.HasOne("Integrator.Models.Domain.Files.IntegratorFile", "IntegratorFile")
                        .WithOne("InegratorFileBlob")
                        .HasForeignKey("Integrator.Models.Domain.Files.InegratorFileBlob", "Id")
                        .HasConstraintName("FK_InegratorFileBlobs_IntegratorFiles")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Integrator.Models.Domain.Files.UserFile", b =>
                {
                    b.HasOne("Integrator.Models.Domain.Files.IntegratorFile", "IntegratorFile")
                        .WithMany("UserFiles")
                        .HasForeignKey("FileID")
                        .HasConstraintName("FK_UserFiles_IntegratorFiles")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Integrator.Models.Domain.Authentication.IntegratorUser", "IntegratorUser")
                        .WithMany("UserFiles")
                        .HasForeignKey("IntegratorUserID")
                        .HasConstraintName("FK_UserFiles_Users")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Integrator.Models.Domain.Files.UserPicture", b =>
                {
                    b.HasOne("Integrator.Models.Domain.Files.IntegratorFile", "IntegratorFile")
                        .WithOne("UserPicture")
                        .HasForeignKey("Integrator.Models.Domain.Files.UserPicture", "Id")
                        .HasConstraintName("FK_UserPictures_IntegratorFiles")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Integrator.Models.Domain.Authentication.IntegratorUser", "IntegratorUser")
                        .WithMany("UserPicture")
                        .HasForeignKey("IntegratorUserID")
                        .HasConstraintName("FK_UserPicture_Users")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Integrator.Models.Domain.KnowledgeBase.Companies.CompanyJob", b =>
                {
                    b.HasOne("Integrator.Models.Domain.Companies.Company", "Company")
                        .WithMany("CompanyJobs")
                        .HasForeignKey("CompanyID")
                        .HasConstraintName("FK_CompanyJobs_Company")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Integrator.Models.Domain.KnowledgeBase.Core.CoreKbJob", "CoreKbJob")
                        .WithMany("CompanyJobs")
                        .HasForeignKey("CoreKbJobID")
                        .HasConstraintName("FK_CompanyJobs_CoreKBJobs")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Integrator.Models.Domain.KnowledgeBase.Companies.CompanyJobRelatedIndustry", b =>
                {
                    b.HasOne("Integrator.Models.Domain.KnowledgeBase.Companies.CompanyJob", "CompanyJob")
                        .WithMany("CompanyJobRelatedIndustries")
                        .HasForeignKey("CompanyJobID")
                        .HasConstraintName("FK_ComanyJobRelatedIndustries_CompanyJobs")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Integrator.Models.Domain.KnowledgeBase.Core.CoreKbIndustry", "CoreKbIndustry")
                        .WithMany("ComanyJobRelatedIndustries")
                        .HasForeignKey("CoreKbIndustryID")
                        .HasConstraintName("FK_ComanyJobRelatedIndustries_CoreKbIndustries")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Integrator.Models.Domain.KnowledgeBase.Companies.CompanyJobSkill", b =>
                {
                    b.HasOne("Integrator.Models.Domain.KnowledgeBase.Companies.CompanyJob", "CompanyJob")
                        .WithMany("CompanyJobSkills")
                        .HasForeignKey("CompanyJobID")
                        .HasConstraintName("FK_CompanyJobSkills_CompanyJobs")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Integrator.Models.Domain.KnowledgeBase.Core.CoreKbSkill", "CoreKbSkill")
                        .WithMany("CompanyJobSkills")
                        .HasForeignKey("CoreKbSkillID")
                        .HasConstraintName("FK_CompanyJobSkills_CoreKBSkills")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Integrator.Models.Domain.KnowledgeBase.Core.CoreKbIndustry", b =>
                {
                    b.HasOne("Integrator.Models.Domain.KnowledgeBase.Core.CoreKbIndustryCategory", "CoreKbIndustryCategory")
                        .WithMany("CoreKbIndustries")
                        .HasForeignKey("CoreKbIndustryCategoryID")
                        .HasConstraintName("FK_CoreKbIndustrySectors_CoreKBIdustryCategories")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Integrator.Models.Domain.KnowledgeBase.Core.CoreKbIndustryJob", b =>
                {
                    b.HasOne("Integrator.Models.Domain.KnowledgeBase.Core.CoreKbIndustry", "CoreKbIndustry")
                        .WithMany("CoreKbIndustryJobs")
                        .HasForeignKey("CoreKbIndustryID")
                        .HasConstraintName("FK_CoreKBIndustrySectorJobs_CoreKbIndustrySectors")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Integrator.Models.Domain.KnowledgeBase.Core.CoreKbJob", "CoreKbJob")
                        .WithMany("CoreKbIndustryJobs")
                        .HasForeignKey("CoreKbJobID")
                        .HasConstraintName("FK_CoreKBIndustrySectorJobs_CoreKBJobs")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Integrator.Models.Domain.KnowledgeBase.Core.CoreKbJobSkill", b =>
                {
                    b.HasOne("Integrator.Models.Domain.KnowledgeBase.Core.CoreKbJob", "CoreJob")
                        .WithMany("CoreKbJobSkills")
                        .HasForeignKey("CoreKbJobID")
                        .HasConstraintName("FK_CoreKBJobSkills_CoreKBJobs")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Integrator.Models.Domain.KnowledgeBase.Core.CoreKbSkill", "CoreSkill")
                        .WithMany("CoreKbJobSkills")
                        .HasForeignKey("CoreKbSkillID")
                        .HasConstraintName("FK_CoreKBJobSoftSkills_CoreSoftSkills")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Integrator.Models.Domain.KnowledgeBase.Core.CoreKbSkill", b =>
                {
                    b.HasOne("Integrator.Models.Domain.KnowledgeBase.Core.CoreSkillCategory", "CoreSkillCategory")
                        .WithMany("CoreKbSkills")
                        .HasForeignKey("CoreSkillCategoryID")
                        .HasConstraintName("FK_CoreKBSkills_CoreSkillCategories")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Integrator.Models.Domain.KnowledgeBase.Core.CoreSkillCategory", b =>
                {
                    b.HasOne("Integrator.Models.Domain.KnowledgeBase.Core.CoreKbSkillType", "CoreKbSkillType")
                        .WithMany("CoreSkillCategories")
                        .HasForeignKey("CoreKbSkillTypeID")
                        .HasConstraintName("FK_CoreSkillCategories_CoreKBSkillTypes")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Integrator.Models.Domain.KnowledgeBase.IndividualUsers.UserJob", b =>
                {
                    b.HasOne("Integrator.Models.Domain.Companies.Company", "Company")
                        .WithMany("UserJobs")
                        .HasForeignKey("CompanyID")
                        .HasConstraintName("FK_UserJobs_Company")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Integrator.Models.Domain.KnowledgeBase.Core.CoreKbJob", "CoreKbJob")
                        .WithMany("UserJobs")
                        .HasForeignKey("CoreKbJobID")
                        .HasConstraintName("FK_UserJobs_CoreKBJobs")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Integrator.Models.Domain.CurriculumVitaes.CurriculumVitea", "CurriculumVitea")
                        .WithMany("UserJobs")
                        .HasForeignKey("CurriculumViteaID")
                        .HasConstraintName("FK_UserJobs_CurriculumViteas")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Integrator.Models.Domain.Authentication.IntegratorUser", "IntegratorUser")
                        .WithMany("UserJobs")
                        .HasForeignKey("IntegratorUserID")
                        .HasConstraintName("FK_UserJobs_IntegratorUsers")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Integrator.Models.Domain.KnowledgeBase.IndividualUsers.UserJobRelatedIndustry", b =>
                {
                    b.HasOne("Integrator.Models.Domain.KnowledgeBase.Core.CoreKbIndustry", "CoreKbIndustry")
                        .WithMany("UserJobRelatedIndustries")
                        .HasForeignKey("CoreKbIndustryID")
                        .HasConstraintName("FK_UserJobRelatedIndustries_CoreKbIndustries")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Integrator.Models.Domain.KnowledgeBase.IndividualUsers.UserJob", "UserJob")
                        .WithMany("UserJobRelatedIndustries")
                        .HasForeignKey("UserJobID")
                        .HasConstraintName("FK_UserJobRelatedIndustries_UserJobs")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Integrator.Models.Domain.KnowledgeBase.IndividualUsers.UserJobSkill", b =>
                {
                    b.HasOne("Integrator.Models.Domain.KnowledgeBase.Core.CoreKbSkill", "CoreKbSkill")
                        .WithMany("UserJobSkills")
                        .HasForeignKey("CoreKbSkillID")
                        .HasConstraintName("FK_UserJobSkills_CoreKBSkills")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Integrator.Models.Domain.KnowledgeBase.IndividualUsers.UserJob", "UserJob")
                        .WithMany("UserJobSkills")
                        .HasForeignKey("UserJobID")
                        .HasConstraintName("FK_UserJobSkills_UserJobs")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}

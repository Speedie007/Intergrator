// <auto-generated />
using System;
using Integrator.Data;
using Integrator.Models.Domain.Addresses;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Integrator.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.2-servicing-10034")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Integrator.Models.Domain.Addresses.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("AddressID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AddressType");

                    b.Property<string>("AreaCode");

                    b.Property<string>("City");

                    b.Property<string>("Country");

                    b.Property<int>("CountryID");

                    b.Property<int>("IntegratorUserID")
                        .HasColumnName("IntegratorUserID");

                    b.Property<string>("Suburb");

                    b.HasKey("Id");

                    b.HasIndex("IntegratorUserID");

                    b.ToTable("Addresses");

                    b.HasDiscriminator<int>("AddressType");
                });

            modelBuilder.Entity("Integrator.Models.Domain.Authentication.IntegratorRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IntegratorRoleID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("IntegratorRoles");
                });

            modelBuilder.Entity("Integrator.Models.Domain.Authentication.IntegratorRoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IntegratorRoleClaimID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<int>("RoleId")
                        .HasColumnName("BIntegratorRoleID");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("IntegratorRoleClaims");
                });

            modelBuilder.Entity("Integrator.Models.Domain.Authentication.IntegratorUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IntegratorUserID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<DateTime>("DateOfBirth");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("IntegratorUsers");
                });

            modelBuilder.Entity("Integrator.Models.Domain.Authentication.IntegratorUserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IntegratorUserClaimID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<int>("UserId")
                        .HasColumnName("IntegratorUserID");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("IntegratorUserClaims");
                });

            modelBuilder.Entity("Integrator.Models.Domain.Authentication.IntegratorUserLogin", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<int>("UserId")
                        .HasColumnName("IntegratorUserID");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("IntegratorUserLogins");
                });

            modelBuilder.Entity("Integrator.Models.Domain.Authentication.IntegratorUserRole", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnName("IntegratorUserID");

                    b.Property<int>("RoleId")
                        .HasColumnName("IntegratorRoleID");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("IntegratorUserRoles");
                });

            modelBuilder.Entity("Integrator.Models.Domain.Authentication.IntegratorUserToken", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnName("IntegratorUserID");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("IntegratorUserTokens");
                });

            modelBuilder.Entity("Integrator.Models.Domain.Common.ContactDetailTypes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ContactDetailTypeID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ContactDetailType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("ContactDetailTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ContactDetailType = "Cell Number"
                        },
                        new
                        {
                            Id = 2,
                            ContactDetailType = "Office Number"
                        },
                        new
                        {
                            Id = 3,
                            ContactDetailType = "Email Address"
                        },
                        new
                        {
                            Id = 4,
                            ContactDetailType = "WebSite"
                        });
                });

            modelBuilder.Entity("Integrator.Models.Domain.Common.ContactDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ContactDetailID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ContactDetailTypeID");

                    b.Property<string>("ContactItem")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("ContactDetailTypeID");

                    b.ToTable("ContactDetails");
                });

            modelBuilder.Entity("Integrator.Models.Domain.Common.IntegratorUserContactDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IntegratorUserContactDetailID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ContactDetailID");

                    b.Property<DateTime>("DateLastUpdated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("IntegratorUserID");

                    b.HasKey("Id");

                    b.HasIndex("ContactDetailID");

                    b.HasIndex("IntegratorUserID");

                    b.ToTable("IntegratorUserContactDetails");
                });

            modelBuilder.Entity("Integrator.Models.Domain.Common.Interests", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("InterestID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Interest")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("Interests");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Interest = "Climbing"
                        },
                        new
                        {
                            Id = 2,
                            Interest = "Snowboarding"
                        },
                        new
                        {
                            Id = 3,
                            Interest = "Cooking"
                        });
                });

            modelBuilder.Entity("Integrator.Models.Domain.Companies.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CompanyID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CompanyName")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Company");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CompanyName = "Self Employed"
                        });
                });

            modelBuilder.Entity("Integrator.Models.Domain.CurriculumVitaes.CurriculumVitaeWorkExperienceReferences", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CurriculumVitaeWorkExperienceReferenceID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ContactFirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("ContactLastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int>("CurriculumViteaWorkExperienceID");

                    b.Property<bool>("HasBeenVerified");

                    b.HasKey("Id");

                    b.HasIndex("CurriculumViteaWorkExperienceID");

                    b.ToTable("CurriculumVitaeWorkExperienceReferences");
                });

            modelBuilder.Entity("Integrator.Models.Domain.CurriculumVitaes.CurriculumVitea", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CurriculumViteaID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CareerSummary")
                        .IsRequired()
                        .IsUnicode(false);

                    b.Property<DateTime>("DateLastUpdated")
                        .HasColumnType("datetime");

                    b.Property<int>("IntegratorUserID");

                    b.HasKey("Id");

                    b.HasIndex("IntegratorUserID");

                    b.ToTable("CurriculumViteas");
                });

            modelBuilder.Entity("Integrator.Models.Domain.CurriculumVitaes.CurriculumViteaWorkExperienceSkillSets", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CurriculumViteaWorkExperienceSkillSetID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CurriculumViteaWorkExperienceID");

                    b.Property<int>("IntegratorUserIndustryCategoryJobSkillSetID");

                    b.HasKey("Id");

                    b.HasIndex("CurriculumViteaWorkExperienceID");

                    b.HasIndex("IntegratorUserIndustryCategoryJobSkillSetID");

                    b.ToTable("CurriculumViteaWorkExperienceSkillSets");
                });

            modelBuilder.Entity("Integrator.Models.Domain.CurriculumVitaes.CurriculumViteaWorkExperiences", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CurriculumViteaWorkExperienceID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Achievments")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("('')")
                        .IsUnicode(false);

                    b.Property<int>("CompanyID");

                    b.Property<int>("CurriculumViteaID");

                    b.Property<DateTime>("DateEnded")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime>("DateStarted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("IntegratorUserIndustryCategoryJobID");

                    b.Property<string>("WorkExperienceDescription");

                    b.HasKey("Id")
                        .HasName("PK_CurriculumViteaWorkExperiences");

                    b.HasIndex("CompanyID");

                    b.HasIndex("CurriculumViteaID");

                    b.HasIndex("IntegratorUserIndustryCategoryJobID");

                    b.ToTable("CurriculumViteaWorkExperiences");
                });

            modelBuilder.Entity("Integrator.Models.Domain.CurriculumVitaes.EductaionalInstitutions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("EductaionalInstitutionID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("EductaionalInstitution")
                        .HasMaxLength(150)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("EductaionalInstitutions");
                });

            modelBuilder.Entity("Integrator.Models.Domain.CurriculumVitaes.IntegratorUserAwards", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IntegratorUserAwardID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AwardDescription")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .IsUnicode(false);

                    b.Property<string>("AwardTitle")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int>("IntegratorUserID")
                        .HasColumnName("IntegratorUserID");

                    b.HasKey("Id");

                    b.HasIndex("IntegratorUserID");

                    b.ToTable("IntegratorUserAwards");
                });

            modelBuilder.Entity("Integrator.Models.Domain.CurriculumVitaes.IntegratorUserInterest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IntegratorUserInterestID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("IntegratorUserID");

                    b.Property<int>("InterestID");

                    b.Property<double>("InterestLevel");

                    b.HasKey("Id");

                    b.HasIndex("IntegratorUserID");

                    b.HasIndex("InterestID");

                    b.ToTable("IntegratorUserInterests");
                });

            modelBuilder.Entity("Integrator.Models.Domain.CurriculumVitaes.IntegratorUserLanguages", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IntegratorUserLanguageID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("CanSpeakAndWrite");

                    b.Property<int>("IntegratorUserID");

                    b.Property<bool>("IsPrimaryLanguage");

                    b.Property<int>("LanguageID");

                    b.HasKey("Id");

                    b.HasIndex("IntegratorUserID");

                    b.HasIndex("LanguageID");

                    b.ToTable("IntegratorUserLanguages");
                });

            modelBuilder.Entity("Integrator.Models.Domain.CurriculumVitaes.LanguageList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("LanguageID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("Languages");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Language = "English"
                        },
                        new
                        {
                            Id = 2,
                            Language = "Afrikaans"
                        },
                        new
                        {
                            Id = 3,
                            Language = "Xhosa"
                        },
                        new
                        {
                            Id = 4,
                            Language = "Zulu"
                        });
                });

            modelBuilder.Entity("Integrator.Models.Domain.CurriculumVitaes.QualificationLevels", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("QualificationLevelID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("QualificationLevel")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("QualificationLevels");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            QualificationLevel = "Masters Degree"
                        },
                        new
                        {
                            Id = 2,
                            QualificationLevel = "Honours Degree"
                        },
                        new
                        {
                            Id = 3,
                            QualificationLevel = "Degree"
                        },
                        new
                        {
                            Id = 4,
                            QualificationLevel = "Doctorial Degree"
                        },
                        new
                        {
                            Id = 5,
                            QualificationLevel = "Certificate"
                        },
                        new
                        {
                            Id = 6,
                            QualificationLevel = "Shool Level Equivalent"
                        });
                });

            modelBuilder.Entity("Integrator.Models.Domain.CurriculumVitaes.UserQualifications", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("UserQualificationID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EductaionalInstitutionID");

                    b.Property<int>("IntegratorUserID");

                    b.Property<double>("QualificationAverage");

                    b.Property<int>("QualificationLevelID");

                    b.Property<string>("QualificationTitle")
                        .IsRequired()
                        .HasMaxLength(175)
                        .IsUnicode(false);

                    b.Property<DateTime>("YearCompletedQualification")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime>("YearStartedQualification")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("Id");

                    b.HasIndex("EductaionalInstitutionID");

                    b.HasIndex("IntegratorUserID");

                    b.HasIndex("QualificationLevelID");

                    b.ToTable("UserQualifications");
                });

            modelBuilder.Entity("Integrator.Models.Domain.CurriculumVitaes.WorkExperienceReferenceContactDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("WorkExperienceReferenceContactDetailID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ContactDetailID");

                    b.Property<int>("CurriculumVitaeWorkExperienceReferenceID");

                    b.HasKey("Id");

                    b.HasIndex("ContactDetailID");

                    b.HasIndex("CurriculumVitaeWorkExperienceReferenceID");

                    b.ToTable("WorkExperienceReferenceContactDetails");
                });

            modelBuilder.Entity("Integrator.Models.Domain.Files.InegratorFileBlobs", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("FileID");

                    b.Property<byte[]>("FileBlob")
                        .IsRequired()
                        .HasColumnType("image");

                    b.HasKey("Id");

                    b.ToTable("InegratorFileBlobs");
                });

            modelBuilder.Entity("Integrator.Models.Domain.Files.IntegratorFiles", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("FileID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime");

                    b.Property<string>("FileExtension")
                        .IsRequired()
                        .HasMaxLength(25)
                        .IsUnicode(false);

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<int>("FileSize");

                    b.HasKey("Id");

                    b.ToTable("IntegratorFiles");
                });

            modelBuilder.Entity("Integrator.Models.Domain.Files.UserFiles", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("UserFileID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FileID");

                    b.Property<int>("IntegratorUserID");

                    b.HasKey("Id");

                    b.HasIndex("FileID");

                    b.HasIndex("IntegratorUserID");

                    b.ToTable("UserFiles");
                });

            modelBuilder.Entity("Integrator.Models.Domain.Files.UserPictures", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PictureID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateLastUpdated")
                        .HasColumnType("datetime");

                    b.Property<int>("FilesID");

                    b.Property<int>("IntegratorUserID");

                    b.HasKey("Id");

                    b.HasIndex("FilesID");

                    b.HasIndex("IntegratorUserID");

                    b.ToTable("UserPictures");
                });

            modelBuilder.Entity("Integrator.Models.Domain.KnowledgeBase.Companies.CompanyIndustry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CompanyIndustryID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CompanyID");

                    b.Property<int>("CoreKBIndustryID");

                    b.Property<DateTime?>("DateLastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasMaxLength(150)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("CompanyID");

                    b.HasIndex("CoreKBIndustryID");

                    b.ToTable("CompanyIndustries");
                });

            modelBuilder.Entity("Integrator.Models.Domain.KnowledgeBase.Companies.CompanyIndustryCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CompanyIndustryCategoryID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CompanyID");

                    b.Property<int>("CompanyIndustryID");

                    b.Property<int>("CoreKBIndustryCategoryID");

                    b.Property<DateTime?>("DateLastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasMaxLength(150)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("CompanyID");

                    b.HasIndex("CompanyIndustryID");

                    b.HasIndex("CoreKBIndustryCategoryID");

                    b.ToTable("CompanyIndustryCategories");
                });

            modelBuilder.Entity("Integrator.Models.Domain.KnowledgeBase.Companies.CompanyIndustryCategoryJob", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CompanyIndustryCategoryJobID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CompanyID");

                    b.Property<int>("CompanyIndustryCategoryID");

                    b.Property<int>("CoreKBIndustryCategoryJobID");

                    b.Property<DateTime?>("DateLastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("CompanyID");

                    b.HasIndex("CompanyIndustryCategoryID");

                    b.HasIndex("CoreKBIndustryCategoryJobID");

                    b.ToTable("CompanyIndustryCategoryJobs");
                });

            modelBuilder.Entity("Integrator.Models.Domain.KnowledgeBase.Companies.CompanyIndustryCategoryJobSkillSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CompanyIndustryCategoryJobSkillSetID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CompanyID");

                    b.Property<int>("CompanyIndustryCategoryJobID");

                    b.Property<int>("CoreKBIndustryCategorySkillSetID");

                    b.Property<DateTime?>("DateLastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasMaxLength(150)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("CompanyID");

                    b.HasIndex("CompanyIndustryCategoryJobID");

                    b.HasIndex("CoreKBIndustryCategorySkillSetID");

                    b.ToTable("CompanyIndustryCategoryJobSkillSets");
                });

            modelBuilder.Entity("Integrator.Models.Domain.KnowledgeBase.Core.CoreKBIndustryCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IndustryCategoryID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Category")
                        .HasMaxLength(100);

                    b.Property<int>("IndustryID");

                    b.HasKey("Id");

                    b.HasIndex("IndustryID");

                    b.ToTable("CoreKBIndustryCategories");
                });

            modelBuilder.Entity("Integrator.Models.Domain.KnowledgeBase.Core.CoreKBIndustryCategoryJob", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IndustryCategoryJobID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("IndustryCategoryID");

                    b.Property<string>("JobTitle")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("IndustryCategoryID");

                    b.ToTable("CoreKBIndustryCategoryJobs");
                });

            modelBuilder.Entity("Integrator.Models.Domain.KnowledgeBase.Core.CoreKBIndustryCategoryJobSkillSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IndustryCategorySkillSetID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("IndustryCategoryJobID");

                    b.Property<string>("IndustryCategorySkillSet")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("IndustryCategoryJobID");

                    b.ToTable("CoreKBIndustryCategoryJobSkillSets");
                });

            modelBuilder.Entity("Integrator.Models.Domain.KnowledgeBase.Core.CoreKBIndustryType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IndustryID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Industry")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("CoreKBIndustryTypes");
                });

            modelBuilder.Entity("Integrator.Models.Domain.KnowledgeBase.IndividualUsers.IntegratorUserIndustry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IntegratorUserIndustryID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CoreKBIndustryID");

                    b.Property<string>("Description")
                        .HasMaxLength(150);

                    b.Property<int>("IntegratorUserID");

                    b.HasKey("Id");

                    b.HasIndex("CoreKBIndustryID");

                    b.HasIndex("IntegratorUserID");

                    b.ToTable("IntegratorUserIndustries");
                });

            modelBuilder.Entity("Integrator.Models.Domain.KnowledgeBase.IndividualUsers.IntegratorUserIndustryCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IntegratorUserIndustryCategoryID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CoreKBIndustryCategoryID");

                    b.Property<DateTime?>("DateLastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasMaxLength(150)
                        .IsUnicode(false);

                    b.Property<int>("IntegratorUserID");

                    b.Property<int>("IntegratorUserIndustryID");

                    b.HasKey("Id");

                    b.HasIndex("CoreKBIndustryCategoryID");

                    b.HasIndex("IntegratorUserID");

                    b.HasIndex("IntegratorUserIndustryID");

                    b.ToTable("IntegratorUserIndustryCategories");
                });

            modelBuilder.Entity("Integrator.Models.Domain.KnowledgeBase.IndividualUsers.IntegratorUserIndustryCategoryJob", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IntegratorUserIndustryCategoryJobID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CoreKBIndustryCategoryJobID");

                    b.Property<DateTime?>("DateLastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasMaxLength(150)
                        .IsUnicode(false);

                    b.Property<int>("IntegratorUserID");

                    b.Property<int>("IntegratorUserIndustryCategoryID");

                    b.Property<bool>("IsPrimaryJobFunction");

                    b.HasKey("Id");

                    b.HasIndex("CoreKBIndustryCategoryJobID");

                    b.HasIndex("IntegratorUserID");

                    b.HasIndex("IntegratorUserIndustryCategoryID");

                    b.ToTable("IntegratorUserIndustryCategoryJobs");
                });

            modelBuilder.Entity("Integrator.Models.Domain.KnowledgeBase.IndividualUsers.IntegratorUserIndustryCategoryJobSkillSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IntegratorUserIndustryCategoryJobSkillSetID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CoreKBIndustryCategorySkillSetID");

                    b.Property<DateTime?>("DateLastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .IsUnicode(false);

                    b.Property<int>("IntegratorUserID");

                    b.Property<int>("IntegratorUserIndustryCategoryJobID");

                    b.Property<decimal>("SkillLevel")
                        .HasColumnType("numeric(18, 2)");

                    b.HasKey("Id");

                    b.HasIndex("CoreKBIndustryCategorySkillSetID");

                    b.HasIndex("IntegratorUserID");

                    b.HasIndex("IntegratorUserIndustryCategoryJobID");

                    b.ToTable("IntegratorUserIndustryCategoryJobSkillSets");
                });

            modelBuilder.Entity("Integrator.Models.Domain.Addresses.ComplexAddress", b =>
                {
                    b.HasBaseType("Integrator.Models.Domain.Addresses.Address");

                    b.Property<string>("ComplexName");

                    b.Property<string>("ComplexUnitNumber");

                    b.HasDiscriminator().HasValue(2);
                });

            modelBuilder.Entity("Integrator.Models.Domain.Addresses.POBoxAddress", b =>
                {
                    b.HasBaseType("Integrator.Models.Domain.Addresses.Address");

                    b.Property<string>("POBoxNumber");

                    b.HasDiscriminator().HasValue(0);
                });

            modelBuilder.Entity("Integrator.Models.Domain.Addresses.StreetAddress", b =>
                {
                    b.HasBaseType("Integrator.Models.Domain.Addresses.Address");

                    b.Property<string>("StreetName");

                    b.Property<string>("StreetNumber");

                    b.HasDiscriminator().HasValue(1);
                });

            modelBuilder.Entity("Integrator.Models.Domain.Addresses.Address", b =>
                {
                    b.HasOne("Integrator.Models.Domain.Authentication.IntegratorUser", "IntegratorUser")
                        .WithMany()
                        .HasForeignKey("IntegratorUserID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Integrator.Models.Domain.Authentication.IntegratorRoleClaim", b =>
                {
                    b.HasOne("Integrator.Models.Domain.Authentication.IntegratorRole", "Role")
                        .WithMany("RoleClaims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Integrator.Models.Domain.Authentication.IntegratorUserClaim", b =>
                {
                    b.HasOne("Integrator.Models.Domain.Authentication.IntegratorUser", "IntegratorUser")
                        .WithMany("Claims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Integrator.Models.Domain.Authentication.IntegratorUserLogin", b =>
                {
                    b.HasOne("Integrator.Models.Domain.Authentication.IntegratorUser", "IntegratorUser")
                        .WithMany("Logins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Integrator.Models.Domain.Authentication.IntegratorUserRole", b =>
                {
                    b.HasOne("Integrator.Models.Domain.Authentication.IntegratorRole", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Integrator.Models.Domain.Authentication.IntegratorUser", "IntegratorUser")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Integrator.Models.Domain.Authentication.IntegratorUserToken", b =>
                {
                    b.HasOne("Integrator.Models.Domain.Authentication.IntegratorUser", "IntegratorUser")
                        .WithMany("Tokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Integrator.Models.Domain.Common.ContactDetails", b =>
                {
                    b.HasOne("Integrator.Models.Domain.Common.ContactDetailTypes", "ContactDetailType")
                        .WithMany("ContactDetails")
                        .HasForeignKey("ContactDetailTypeID")
                        .HasConstraintName("FK_ContactDetails_ContactDetailTypes")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Integrator.Models.Domain.Common.IntegratorUserContactDetails", b =>
                {
                    b.HasOne("Integrator.Models.Domain.Common.ContactDetails", "ContactDetail")
                        .WithMany("IntegratorUserContactDetails")
                        .HasForeignKey("ContactDetailID")
                        .HasConstraintName("FK_IntegratorUserContactDetails_ContactDetails")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Integrator.Models.Domain.Authentication.IntegratorUser", "IntegratorUser")
                        .WithMany("IntegratorUserContactDetails")
                        .HasForeignKey("IntegratorUserID")
                        .HasConstraintName("FK_IntegratorUserContactDetails_IntegratorUsers")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Integrator.Models.Domain.CurriculumVitaes.CurriculumVitaeWorkExperienceReferences", b =>
                {
                    b.HasOne("Integrator.Models.Domain.CurriculumVitaes.CurriculumViteaWorkExperiences", "CurriculumViteaWorkExperience")
                        .WithMany("CurriculumVitaeWorkExperienceReferences")
                        .HasForeignKey("CurriculumViteaWorkExperienceID")
                        .HasConstraintName("FK_CurriculumVitaeWorkExperienceReferences_CurriculumViteaWorkExperiences")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Integrator.Models.Domain.CurriculumVitaes.CurriculumVitea", b =>
                {
                    b.HasOne("Integrator.Models.Domain.Authentication.IntegratorUser", "IntegratorUser")
                        .WithMany("CurriculumViteas")
                        .HasForeignKey("IntegratorUserID")
                        .HasConstraintName("FK_CurriculumViteas_IntegratorUsers")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Integrator.Models.Domain.CurriculumVitaes.CurriculumViteaWorkExperienceSkillSets", b =>
                {
                    b.HasOne("Integrator.Models.Domain.CurriculumVitaes.CurriculumViteaWorkExperiences", "CurriculumViteaWorkExperience")
                        .WithMany("CurriculumViteaWorkExperienceSkillSets")
                        .HasForeignKey("CurriculumViteaWorkExperienceID")
                        .HasConstraintName("FK_CurriculumViteaWorkExperienceSkillSets_CurriculumViteaWorkExperiences")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Integrator.Models.Domain.KnowledgeBase.IndividualUsers.IntegratorUserIndustryCategoryJobSkillSet", "IntegratorUserIndustryCategoryJobSkillSet")
                        .WithMany("CurriculumViteaWorkExperienceSkillSets")
                        .HasForeignKey("IntegratorUserIndustryCategoryJobSkillSetID")
                        .HasConstraintName("FK_CurriculumViteaWorkExperienceSkillSets_IntegratorUserIndustryCategoryJobSkillSets")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Integrator.Models.Domain.CurriculumVitaes.CurriculumViteaWorkExperiences", b =>
                {
                    b.HasOne("Integrator.Models.Domain.Companies.Company", "Company")
                        .WithMany("CurriculumViteaWorkExperiences")
                        .HasForeignKey("CompanyID")
                        .HasConstraintName("FK_CurriculumViteaWorkExperiences_Company")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Integrator.Models.Domain.CurriculumVitaes.CurriculumVitea", "CurriculumVitea")
                        .WithMany("CurriculumViteaWorkExperiences")
                        .HasForeignKey("CurriculumViteaID")
                        .HasConstraintName("FK_UserWorkExperienceHistory_CurriculumViteas")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Integrator.Models.Domain.KnowledgeBase.IndividualUsers.IntegratorUserIndustryCategoryJob", "Job")
                        .WithMany("CurriculumViteaWorkExperiences")
                        .HasForeignKey("IntegratorUserIndustryCategoryJobID")
                        .HasConstraintName("FK_UseEmploymentHistory_IntegratorUserIndustryCategoryJobs")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Integrator.Models.Domain.CurriculumVitaes.IntegratorUserAwards", b =>
                {
                    b.HasOne("Integrator.Models.Domain.Authentication.IntegratorUser", "IntegratorUser")
                        .WithMany("IntegratorUserAwards")
                        .HasForeignKey("IntegratorUserID")
                        .HasConstraintName("FK_IntegratorUserAwards_IntegratorUsers")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Integrator.Models.Domain.CurriculumVitaes.IntegratorUserInterest", b =>
                {
                    b.HasOne("Integrator.Models.Domain.Authentication.IntegratorUser", "IntegratorUser")
                        .WithMany("IntegratorUserInterests")
                        .HasForeignKey("IntegratorUserID")
                        .HasConstraintName("FK_IntegratorUserInterests_IntegratorUsers")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Integrator.Models.Domain.Common.Interests", "UserInterest")
                        .WithMany("IntegratorUserInterests")
                        .HasForeignKey("InterestID")
                        .HasConstraintName("FK_IntegratorUserInterests_Interests")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Integrator.Models.Domain.CurriculumVitaes.IntegratorUserLanguages", b =>
                {
                    b.HasOne("Integrator.Models.Domain.Authentication.IntegratorUser", "IntegratorUser")
                        .WithMany("IntegratorUserLanguages")
                        .HasForeignKey("IntegratorUserID")
                        .HasConstraintName("FK_IntegratorUserLanguages_IntegratorUsers")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Integrator.Models.Domain.CurriculumVitaes.LanguageList", "LanguageSpoken")
                        .WithMany("IntegratorUserLanguages")
                        .HasForeignKey("LanguageID")
                        .HasConstraintName("FK_IntegratorUserLanguages_Languages")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Integrator.Models.Domain.CurriculumVitaes.UserQualifications", b =>
                {
                    b.HasOne("Integrator.Models.Domain.CurriculumVitaes.EductaionalInstitutions", "EductaionalInstitution")
                        .WithMany("UserQualifications")
                        .HasForeignKey("EductaionalInstitutionID")
                        .HasConstraintName("FK_UserQualifications_EductaionalInstitutions")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Integrator.Models.Domain.Authentication.IntegratorUser", "IntegratorUser")
                        .WithMany("UserQualifications")
                        .HasForeignKey("IntegratorUserID")
                        .HasConstraintName("FK_UserQualifications_IntegratorUsers")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Integrator.Models.Domain.CurriculumVitaes.QualificationLevels", "QualificationLevel")
                        .WithMany("UserQualifications")
                        .HasForeignKey("QualificationLevelID")
                        .HasConstraintName("FK_UserQualifications_QualificationLevels")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Integrator.Models.Domain.CurriculumVitaes.WorkExperienceReferenceContactDetails", b =>
                {
                    b.HasOne("Integrator.Models.Domain.Common.ContactDetails", "ContactDetail")
                        .WithMany("WorkExperienceReferenceContactDetails")
                        .HasForeignKey("ContactDetailID")
                        .HasConstraintName("FK_WorkExperienceReferenceContactDetails_ContactDetails")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Integrator.Models.Domain.CurriculumVitaes.CurriculumVitaeWorkExperienceReferences", "CurriculumVitaeWorkExperienceReference")
                        .WithMany("WorkExperienceReferenceContactDetails")
                        .HasForeignKey("CurriculumVitaeWorkExperienceReferenceID")
                        .HasConstraintName("FK_WorkExperienceReferenceContactDetails_CurriculumVitaeWorkExperienceReferences")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Integrator.Models.Domain.Files.InegratorFileBlobs", b =>
                {
                    b.HasOne("Integrator.Models.Domain.Files.IntegratorFiles", "IntegratorFile")
                        .WithOne("InegratorFileBlob")
                        .HasForeignKey("Integrator.Models.Domain.Files.InegratorFileBlobs", "Id")
                        .HasConstraintName("FK_InegratorFileBlobs_IntegratorFiles")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Integrator.Models.Domain.Files.UserFiles", b =>
                {
                    b.HasOne("Integrator.Models.Domain.Files.IntegratorFiles", "IntegratorFile")
                        .WithMany("UserFiles")
                        .HasForeignKey("FileID")
                        .HasConstraintName("FK_UserFiles_IntegratorFiles")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Integrator.Models.Domain.Authentication.IntegratorUser", "IntegratorUser")
                        .WithMany("UserFiles")
                        .HasForeignKey("IntegratorUserID")
                        .HasConstraintName("FK_UserFiles_Users")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Integrator.Models.Domain.Files.UserPictures", b =>
                {
                    b.HasOne("Integrator.Models.Domain.Files.IntegratorFiles", "IntegratorFile")
                        .WithMany("UserPictures")
                        .HasForeignKey("FilesID")
                        .HasConstraintName("FK_UserPicture_IntegratorFiles")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Integrator.Models.Domain.Authentication.IntegratorUser", "IntegratorUser")
                        .WithMany("UserPicture")
                        .HasForeignKey("IntegratorUserID")
                        .HasConstraintName("FK_UserPicture_Users")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Integrator.Models.Domain.KnowledgeBase.Companies.CompanyIndustry", b =>
                {
                    b.HasOne("Integrator.Models.Domain.Companies.Company", "Company")
                        .WithMany("CompanyIndustries")
                        .HasForeignKey("CompanyID")
                        .HasConstraintName("FK_CompanyIndustries_Companies")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Integrator.Models.Domain.KnowledgeBase.Core.CoreKBIndustryType", "CoreKBIndustry")
                        .WithMany("CompanyIndustries")
                        .HasForeignKey("CoreKBIndustryID")
                        .HasConstraintName("FK_CompanyIndustries_Industries")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Integrator.Models.Domain.KnowledgeBase.Companies.CompanyIndustryCategory", b =>
                {
                    b.HasOne("Integrator.Models.Domain.Companies.Company", "Company")
                        .WithMany("CompanyIndustryCategories")
                        .HasForeignKey("CompanyID")
                        .HasConstraintName("FK_CompanyIndustryCategories_Companies")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Integrator.Models.Domain.KnowledgeBase.Companies.CompanyIndustry", "CompanyIndustry")
                        .WithMany("CompanyIndustryCategories")
                        .HasForeignKey("CompanyIndustryID")
                        .HasConstraintName("FK_CompanyIndustryCategories_CompanyIndustries")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Integrator.Models.Domain.KnowledgeBase.Core.CoreKBIndustryCategory", "CoreKBIndustryCategory")
                        .WithMany("CompanyIndustryCategories")
                        .HasForeignKey("CoreKBIndustryCategoryID")
                        .HasConstraintName("FK_CompanyIndustryCategories_IndustryCategories")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Integrator.Models.Domain.KnowledgeBase.Companies.CompanyIndustryCategoryJob", b =>
                {
                    b.HasOne("Integrator.Models.Domain.Companies.Company", "Company")
                        .WithMany("CompanyIndustryCategoryJobs")
                        .HasForeignKey("CompanyID")
                        .HasConstraintName("FK_CompanyIndustryCategoryJobs_Companies")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Integrator.Models.Domain.KnowledgeBase.Companies.CompanyIndustryCategory", "CompanyIndustryCategory")
                        .WithMany("CompanyIndustryCategoryJobs")
                        .HasForeignKey("CompanyIndustryCategoryID")
                        .HasConstraintName("FK_CompanyIndustryCategoryJobs_CompanyIndustryCategories")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Integrator.Models.Domain.KnowledgeBase.Core.CoreKBIndustryCategoryJob", "CoreKBIndustryCategoryJob")
                        .WithMany("CompanyIndustryCategoryJobs")
                        .HasForeignKey("CoreKBIndustryCategoryJobID")
                        .HasConstraintName("FK_CompanyIndustryCategoryJobs_IndustryCategoryJobs")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Integrator.Models.Domain.KnowledgeBase.Companies.CompanyIndustryCategoryJobSkillSet", b =>
                {
                    b.HasOne("Integrator.Models.Domain.Companies.Company", "Company")
                        .WithMany("CompanyIndustryCategoryJobSkillSets")
                        .HasForeignKey("CompanyID")
                        .HasConstraintName("FK_CompanyIndustryCategoryJobSkillSets_Companies")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Integrator.Models.Domain.KnowledgeBase.Companies.CompanyIndustryCategoryJob", "CompanyIndustryCategoryJob")
                        .WithMany("CompanyIndustryCategoryJobSkillSets")
                        .HasForeignKey("CompanyIndustryCategoryJobID")
                        .HasConstraintName("FK_CompanyIndustryCategoryJobSkillSets_CompanyIndustryCategoryJobs")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Integrator.Models.Domain.KnowledgeBase.Core.CoreKBIndustryCategoryJobSkillSet", "CoreKBIndustryCategorySkillSet")
                        .WithMany("CompanyIndustryCategoryJobSkillSets")
                        .HasForeignKey("CoreKBIndustryCategorySkillSetID")
                        .HasConstraintName("FK_CompanyIndustryCategoryJobSkillSets_IndustryCategorySkillSets")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Integrator.Models.Domain.KnowledgeBase.Core.CoreKBIndustryCategory", b =>
                {
                    b.HasOne("Integrator.Models.Domain.KnowledgeBase.Core.CoreKBIndustryType", "Industry")
                        .WithMany("CoreKBIndustryCategories")
                        .HasForeignKey("IndustryID")
                        .HasConstraintName("FK_IndustryCategories_Industries")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Integrator.Models.Domain.KnowledgeBase.Core.CoreKBIndustryCategoryJob", b =>
                {
                    b.HasOne("Integrator.Models.Domain.KnowledgeBase.Core.CoreKBIndustryCategory", "IndustryCategory")
                        .WithMany("CoreKBIndustryCategoryJobs")
                        .HasForeignKey("IndustryCategoryID")
                        .HasConstraintName("FK_IndustryCategoryJobs_IndustryCategories")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Integrator.Models.Domain.KnowledgeBase.Core.CoreKBIndustryCategoryJobSkillSet", b =>
                {
                    b.HasOne("Integrator.Models.Domain.KnowledgeBase.Core.CoreKBIndustryCategoryJob", "CoreKBIndustryCategoryJob")
                        .WithMany("CoreKBIndustryCategoryJobSkillSets")
                        .HasForeignKey("IndustryCategoryJobID")
                        .HasConstraintName("FK_IndustryCategorySkillSets_IndustryCategoryJobs")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Integrator.Models.Domain.KnowledgeBase.IndividualUsers.IntegratorUserIndustry", b =>
                {
                    b.HasOne("Integrator.Models.Domain.KnowledgeBase.Core.CoreKBIndustryType", "CoreKBIndustry")
                        .WithMany("IntegratorUserIndustries")
                        .HasForeignKey("CoreKBIndustryID")
                        .HasConstraintName("FK_UserIndustries_Industries");

                    b.HasOne("Integrator.Models.Domain.Authentication.IntegratorUser", "IntegratorUser")
                        .WithMany("IntegratorUserIndustries")
                        .HasForeignKey("IntegratorUserID")
                        .HasConstraintName("FK_UserIndustries_Users");
                });

            modelBuilder.Entity("Integrator.Models.Domain.KnowledgeBase.IndividualUsers.IntegratorUserIndustryCategory", b =>
                {
                    b.HasOne("Integrator.Models.Domain.KnowledgeBase.Core.CoreKBIndustryCategory", "CoreKBIndustryCategory")
                        .WithMany("IntegratorUserIndustryCategories")
                        .HasForeignKey("CoreKBIndustryCategoryID")
                        .HasConstraintName("FK_IntegratorUserIndustryCategories_IndustryCategories")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Integrator.Models.Domain.Authentication.IntegratorUser", "IntegratorUser")
                        .WithMany("IntegratorUserIndustryCategories")
                        .HasForeignKey("IntegratorUserID")
                        .HasConstraintName("FK_IntegratorUserIndustryCategories_Users")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Integrator.Models.Domain.KnowledgeBase.IndividualUsers.IntegratorUserIndustry", "IntegratorUserIndustry")
                        .WithMany("IntegratorUserIndustryCategories")
                        .HasForeignKey("IntegratorUserIndustryID")
                        .HasConstraintName("FK_IntegratorUserIndustryCategories_UserIndustries")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Integrator.Models.Domain.KnowledgeBase.IndividualUsers.IntegratorUserIndustryCategoryJob", b =>
                {
                    b.HasOne("Integrator.Models.Domain.KnowledgeBase.Core.CoreKBIndustryCategoryJob", "CoreKBIndustryCategoryJob")
                        .WithMany("IntegratorUserIndustryCategoryJobs")
                        .HasForeignKey("CoreKBIndustryCategoryJobID")
                        .HasConstraintName("FK_IntegratorUserIndustryCategoryJobs_IndustryCategoryJobs")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Integrator.Models.Domain.Authentication.IntegratorUser", "IntegratorUser")
                        .WithMany("IntegratorUserIndustryCategoryJobs")
                        .HasForeignKey("IntegratorUserID")
                        .HasConstraintName("FK_IntegratorUserIndustryCategoryJobs_Users")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Integrator.Models.Domain.KnowledgeBase.IndividualUsers.IntegratorUserIndustryCategory", "IntegratorUserIndustryCategory")
                        .WithMany("IntegratorUserIndustryCategoryJobs")
                        .HasForeignKey("IntegratorUserIndustryCategoryID")
                        .HasConstraintName("FK_IntegratorUserIndustryCategoryJobs_IntegratorUserIndustryCategories")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Integrator.Models.Domain.KnowledgeBase.IndividualUsers.IntegratorUserIndustryCategoryJobSkillSet", b =>
                {
                    b.HasOne("Integrator.Models.Domain.KnowledgeBase.Core.CoreKBIndustryCategoryJobSkillSet", "CoreKBIndustryCategoryJobSkillSet")
                        .WithMany("IntegratorUserIndustryCategoryJobSkillSets")
                        .HasForeignKey("CoreKBIndustryCategorySkillSetID")
                        .HasConstraintName("FK_IntegratorUserIndustryCategoryJobSkillSets_IndustryCategorySkillSets")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Integrator.Models.Domain.Authentication.IntegratorUser", "IntegratorUser")
                        .WithMany("IntegratorUserIndustryCategoryJobSkillSets")
                        .HasForeignKey("IntegratorUserID")
                        .HasConstraintName("FK_IntegratorUserIndustryCategoryJobSkillSets_Users")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Integrator.Models.Domain.KnowledgeBase.IndividualUsers.IntegratorUserIndustryCategoryJob", "IntegratorUserIndustryCategoryJob")
                        .WithMany("IntegratorUserIndustryCategoryJobSkillSets")
                        .HasForeignKey("IntegratorUserIndustryCategoryJobID")
                        .HasConstraintName("FK_IntegratorUserIndustryCategoryJobSkillSets_IntegratorUserIndustryCategoryJobs")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
